defmodule Krug.MathUtil do

  @moduledoc """
  Utilitary module for simplify some Math operations.
  """



  @doc """
  Calculates the pow(base,expoent) on one more performatic way,
  supporting numbers really bigger.

  ## Examples

  ```elixir 
  iex > Krug.MathUtil.pow(3,1000)
  1322070819480806636890455259752144365965422032752148167664920368226828597346704899540778313850608061963909777696872582355950954582100618911865342725257953674027620225198320803878014774228964841274390400117588618041128947815623094438061566173054086674490506178125480344405547054397038895817465368254916136220830268563778582290228416398307887896918556404084898937609373242171846359938695516765018940588109060426089671438864102814350385648747165832010614366132173102768902855220001
  ```
  ```elixir 
  iex > Krug.MathUtil.pow(3,10000)

  ```
  """
  def pow(base,expoent) do
    cond do
      (expoent == 0) -> 1
      (rem(expoent,2) == 1) -> base * pow(base,expoent - 1)
      true -> powEven(base,expoent)
    end
  end


  
  defp powEven(base,expoent) do
    result = pow(base,div(expoent,2))
    result * result
  end


  
end